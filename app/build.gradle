apply plugin: 'com.android.application'

def cfg = rootProject.ext.configuration // 配置
def libs = rootProject.ext.libraries // 库

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //签名配置
    signingConfigs {
        release {
            keyAlias 'ysx_test_alias'
            keyPassword '123456'
            storeFile file('ysx_test.jks')
            storePassword '1qaz2wsx'
        }
        debug{
            storeFile file("debug.keystore")
        }
    }

    buildTypes {

        debug {
            // debug版本不混淆
            minifyEnabled false
        }

        release {
            //todo release版本混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
        }
    }

    //打包后应用名称
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "get_image_release_${defaultConfig.versionName}_${getTime()}.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "get_image_debug_${defaultConfig.versionName}.apk"
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }

        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    androidTestCompile("com.android.support.test.espresso:espresso-core:${libs.espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:${libs.junitVersion}"

    //support start
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"

    //support end

    //第三方库 start

    compile "com.github.bumptech.glide:glide:${libs.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${libs.glide}"

    compile "com.squareup.picasso:picasso:${libs.picasso}"

    compile "com.android.volley:volley:${libs.volley}"

    compile "com.nostra13.universalimageloader:universal-image-loader:${libs.universalimageloader}"

    compile "com.jakewharton:butterknife:${libs.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libs.butterknife}"

    //第三方库 end

}

repositories {
    mavenCentral()
    maven { url 'https://maven.google.com' }
}

def static getTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getDefault());
}
